#Kevin Zhao 260952439
import matplotlib.pyplot as plt
from build_countries import *

def get_bar_co2_pc_by_continent(country, year):
    
    """
    (dict, int) -> list
    
    takes a dictionary as input like the one
 generated by get_countries_from_file(dictionary of iso_codes mapping to Country objects)
    and an integer representing a year.
    
    The function should 
create a bar plot representing the co2 emissions per capita (in tonnes)
    produced by all the countries
 in each continent. And returns a
 list of the values being plotted.
    
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> get_bar_co2_pc_by_continent(d1, 2001)
    [0.20320332558992543, 67.01626016260163, 7.6609004739336495, 1.4196063588190764]
    
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> get_bar_co2_pc_by_continent(d2, 2001)
    [1.0635316874571887, 2.7137953790791656, 8.129151661752145, 14.394814647284988, 12.835438539815863, 2.3159540037207043]
    
    >>> d3 = get_countries_from_file("large_co2_data.tsv")
    >>> get_bar_co2_pc_by_continent(d3, 1974)
    [0.9728243854178404, 2.0816508131238436, 9.646975069701972, 15.269076453425305, 9.276435624580573, 1.9800962379702538]
    """
    
    co2_emissions = []
    continent_objects = Country.get_countries_by_continent(list(country.values()))#sort them by sorting the continents
    continents = list(continent_objects)
    continents.sort()
    for continent in continents:
        co2_emissions.append(Country.get_total_co2_emissions_per_capita_by_year(continent_objects[continent], year))
    
    plt.bar(continents, co2_emissions)
    plt.title("CO2 emissions per capita in " + str(year) + " by tongke.zhao@mail.mcgill.ca")
    plt.ylabel("co2 (in tonnes)")
    plt.savefig("co2_pc_by_continent_" + str(year) + ".png")
    return co2_emissions

def get_bar_historical_co2_by_continent(country, year):
    
    """
    (dict, int) -> list
    
    takes a dictionary as input like the one
 generated by get_countries_from_file(dictionary of iso_codes mapping to Country objects)
    and an integer representing a year.
    
    The function
 should create a bar plot representing the historical co2 emissions (in millions of tonnes)
    produced by
 all the countries in each continent.
    the function 
should return a list of the values being plotted
    
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> get_bar_historical_co2_by_continent(d1, 2015)
    [4.877, 207.54500000000002, 359.367, 149.34300000000002]
    
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_bar_historical_co2_by_continent(d2, 2000)
    >>> data[:5]
    [23526.186, 280013.2760000001, 404139.4419999999, 338457.92800000013, 11935.638999999997]
    
    >>> d3 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_bar_historical_co2_by_continent(d3, 1987)
    >>> len(data)
    6
    """
    
    hist_co2 = []    
    object_continents = Country.get_countries_by_continent(list(country.values())) #returns a dict mapping continents to list of countries
    continents = list(object_continents) #making the list of these continents
    continents.sort()
    for continent in continents:
        hist_co2.append(Country.get_total_historical_co2_emissions(object_continents[continent], year))
    plt.bar(continents, hist_co2)
    plt.title("Historical CO2 emissions up to " + str(year) + " by tongke.zhao@mail.mcgill.ca")
    plt.ylabel("co2 (in millions of tonnes)")
    plt.savefig("hist_co2_by_continent_" + str(year) + ".png")
    return hist_co2

def get_bar_co2_pc_top_ten(countries, year):
    
    """
    (dict, int) -> list
    
    takes a dictionary as input like the one
 generated by get_countries_from_file(dictionary of iso_codes mapping to Country objects)
    and an integer representing a year.
    
    The function should
 create a bar plot representing the co2 emissions per capita (in tonnes)
    produced by the top 10 
producing countries in the dictionary
    the function 
should return a list of the values being plotted.
    
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> data = get_bar_co2_pc_top_ten(d1, 2001)
    >>> data[0]
    67.01626016260163
    
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_bar_co2_pc_top_ten(d2, 1974)
    >>> data[4]
    39.891891891891895
    
    >>> d3 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_bar_co2_pc_top_ten(d3, 2012)
    >>> data[0]
    42.44945355191257
    """
    
    country_list = []
    co2_emission = []
    #making a dict mapping Country object to co2 emissions
    country_co2_emission = Country.get_co2_emissions_per_capita_by_year(list(countries.values()), year)
    top_n = Country.get_top_n(country_co2_emission, 10)
    for iso, emission in top_n:
        country_list.append(iso)
        co2_emission.append(emission)
            
    plt.bar(country_list, co2_emission)
    plt.title("Top 10 countries for CO2 emissions pc in " + str(year) + " by tongke.zhao@mail.mcgill.ca")
    plt.ylabel("co2 (in tonnes)")
    plt.savefig("top_10_co2_pc_" + str(year) + ".png")
    return co2_emission

def get_bar_top_ten_historical_co2(countries, year):
    
    """
    (dict, int) -> list
    
    takes a dictionary as input like the one
 generated by get_countries_from_file(dictionary of iso_codes mapping to Country objects)
    and an integer representing a year.
    
    The function should
 create a bar plot representing the historical co2 emissions (in millions of tonnes)
    produced by the
 top 10 producing countries in the dictionary
    the function
 should return a list with the values being plotted
    
    >>> d1 = get_countries_from_file("small_co2_data.tsv")
    >>> get_bar_top_ten_historical_co2(d1, 2015)
    [306.696, 166.33, 149.34300000000002, 48.923, 41.215, 3.748, 3.324, 1.553, 0.0]
    
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> get_bar_top_ten_historical_co2(d2, 2000)
    [301943.7180000001, 76220.11699999997, 72805.80799999999, 71940.95700000002, 68459.44400000003, 41015.341, 31048.06799999999,
    22219.773000000023, 21392.696000000007, 20727.115]
    
    >>> d3 = get_countries_from_file("large_co2_data.tsv")
    >>> p = get_bar_top_ten_historical_co2(d3, 1997)[:5]
    >>> p == [284367.0060000001, 73499.60399999996, 67525.172, 66764.30900000001, 62932.47499999999]
    True
    """
    
    
    country_list = []
    co2_emission = []
    country_his_co2 = Country.get_historical_co2_emissions(list(countries.values()), year) #making a dict of historical co2 emissions
    top_n = Country.get_top_n(country_his_co2, 10) #getting the top ten historical emission
    for iso, emission in top_n:
        country_list.append(iso)
        co2_emission.append(emission)
        
    plt.bar(country_list, co2_emission)
    plt.title("Top 10 countries for historical CO2 up to " + str(year) + " by tongke.zhao@mail.mcgill.ca")
    plt.ylabel("co2 (in millions of tonnes)")
    plt.savefig("top_10_hist_co2_" + str(year) + ".png")
    return co2_emission

def get_plot_co2_emissions(countries, iso_codes, min_y, max_y):
    
    """
    (dict, list, int, int) -> list
    
    takes as input the following: a dictionary
 like the one generated by get_countries_from_file
    (dictionary of iso_codes mapping to Country objects)
    a list of strings representing ISO codes, an
 integer min_year, and another integer max_year.
    
    The function should plot the co2 emissions of the selected countries from min_year to max_year.
    plot the data of the years from min_year to 
max_year using a step obtained by taking the number of total years and dividing it by 10.
    The 
function should return a 2D list.
    Each sublist should contain the co2 emission of a selected country
 from min_year to max_year.
    
    >>> d2 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_plot_co2_emissions(d2, ["USA", "CHN", "RUS", "DEU", "GBR"], 1990, 2000)
    >>> data[0][:5]
    [5121.179, 5071.564, 5174.671, 5281.387, 5375.034]
    
    >>> d = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_plot_co2_emissions(d, ["USA", "CHN", "RUS", "DEU", "GBR"], 1970, 2000)
    >>> data[0][:5]
    [4325.501, 4351.309, 4558.453, 4762.452, 4592.958]
    
    >>> d3 = get_countries_from_file("large_co2_data.tsv")
    >>> data = get_plot_co2_emissions(d, ["IRN", "TCD", "PRT", "HND", "TTO"], 1800, 2000)
    >>> data[2][:5]
    [0.0, 0.0, 0.0, 0.0, 0.0]
    """
    
    years = []
    co2_emission = []
    all_emission = []
    country_data = []
    styles = ["o-g", ".--b", ",:r", "^-.c", "<--k"]
    n = 0
    t = 0 #both of these are for counting purposes
    
    step = (max_y-min_y)//10 #the steps of the years
    while t >= 0: #the points to be plotted
        if (min_y+ step*t) >= max_y: #plot until the max_y
            years.append(max_y)
            break
        years.append(min_y+ step*t)
        t += 1
    for iso in iso_codes:
        if iso not in countries:
            continue
        for year in years: #the points to be plotted
            co2_emission.append(countries[iso].get_co2_emissions_by_year(year))
        country_data.append(co2_emission)
        co2_emission = []
        for year in range(min_y, max_y+1):
            co2_emission.append(countries[iso].get_co2_emissions_by_year(year)) #making the list being returned
        all_emission.append(co2_emission)
        co2_emission = []
    
    for emissions in country_data:
        plt.plot(years, emissions, styles[n])
        n+=1
    
    plt.title("CO2 emissions between " + str(min_y) + " and " + str(max_y) + " by tongke.zhao@mail.mcgill.ca")
    plt.ylabel("co2 (in millions of tonnes)")
    plt.legend(iso_codes)
    plt.savefig("co2_emissions_" + str(min_y) + "_" + str(max_y) + ".png")
    return all_emission
    
    